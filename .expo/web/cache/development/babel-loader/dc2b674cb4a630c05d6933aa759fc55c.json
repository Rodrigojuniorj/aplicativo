{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tavar\\\\Documents\\\\GitHub\\\\aplicativo\\\\src\\\\routes\\\\index.js\";\nimport React from \"react\";\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport Movies from \"../pages/Movies\";\nimport StackRoutes from \"./StackRoutes\";\nvar Drawer = createDrawerNavigator();\n\nfunction Routes() {\n  var _this = this;\n\n  return React.createElement(Drawer.Navigator, {\n    screenOptions: {\n      headerShown: false,\n      drawerStyle: {\n        backgroundColor: '#090A0E',\n        paddingTop: 20\n      },\n      drawerActiveBackgroundColor: '#E72F49',\n      drawerActiveTintColor: '#FFF',\n      drawerInativeTintColor: '#FFF'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"HomeDrawer\",\n    component: StackRoutes,\n    options: {\n      title: 'Home',\n      drawerIcon: function drawerIcon(_ref) {\n        var focused = _ref.focused,\n            size = _ref.size,\n            color = _ref.color;\n        return React.createElement(MaterialCommunityIcons, {\n          name: focused ? 'movie-open' : 'movie-outline',\n          size: size,\n          color: color,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Movies\",\n    component: Movies,\n    options: {\n      title: \"Meus Filmes\",\n      drawerIcon: function drawerIcon(_ref2) {\n        var focused = _ref2.focused,\n            size = _ref2.size,\n            color = _ref2.color;\n        return React.createElement(MaterialCommunityIcons, {\n          name: focused ? 'archive' : 'archive-outline',\n          size: size,\n          color: color,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Routes;","map":{"version":3,"sources":["C:/Users/tavar/Documents/GitHub/aplicativo/src/routes/index.js"],"names":["React","createDrawerNavigator","MaterialCommunityIcons","Movies","StackRoutes","Drawer","Routes","headerShown","drawerStyle","backgroundColor","paddingTop","drawerActiveBackgroundColor","drawerActiveTintColor","drawerInativeTintColor","title","drawerIcon","focused","size","color"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT,QAAsC,0BAAtC;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AAEA,OAAOC,MAAP;AACA,OAAOC,WAAP;AAEA,IAAMC,MAAM,GAAGJ,qBAAqB,EAApC;;AAEA,SAASK,MAAT,GAAiB;AAAA;;AACb,SAII,oBAAC,MAAD,CAAQ,SAAR;AACI,IAAA,aAAa,EAAE;AACXC,MAAAA,WAAW,EAAE,KADF;AAGXC,MAAAA,WAAW,EAAC;AACRC,QAAAA,eAAe,EAAE,SADT;AAERC,QAAAA,UAAU,EAAE;AAFJ,OAHD;AAQXC,MAAAA,2BAA2B,EAAE,SARlB;AASXC,MAAAA,qBAAqB,EAAE,MATZ;AAUXC,MAAAA,sBAAsB,EAAE;AAVb,KADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcI,oBAAC,MAAD,CAAQ,MAAR;AACI,IAAA,IAAI,EAAC,YADT;AAEI,IAAA,SAAS,EAAET,WAFf;AAGI,IAAA,OAAO,EAAE;AACLU,MAAAA,KAAK,EAAE,MADF;AAELC,MAAAA,UAAU,EAAE;AAAA,YAAGC,OAAH,QAAGA,OAAH;AAAA,YAAYC,IAAZ,QAAYA,IAAZ;AAAA,YAAkBC,KAAlB,QAAkBA,KAAlB;AAAA,eACR,oBAAC,sBAAD;AAEI,UAAA,IAAI,EAAEF,OAAO,GAAG,YAAH,GAAkB,eAFnC;AAGI,UAAA,IAAI,EAAEC,IAHV;AAII,UAAA,KAAK,EAAEC,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADQ;AAAA;AAFP,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,EA6BI,oBAAC,MAAD,CAAQ,MAAR;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,SAAS,EAAEf,MAFf;AAGI,IAAA,OAAO,EAAE;AACLW,MAAAA,KAAK,EAAE,aADF;AAELC,MAAAA,UAAU,EAAE;AAAA,YAAGC,OAAH,SAAGA,OAAH;AAAA,YAAYC,IAAZ,SAAYA,IAAZ;AAAA,YAAkBC,KAAlB,SAAkBA,KAAlB;AAAA,eACR,oBAAC,sBAAD;AAEI,UAAA,IAAI,EAAEF,OAAO,GAAG,SAAH,GAAe,iBAFhC;AAGI,UAAA,IAAI,EAAEC,IAHV;AAII,UAAA,KAAK,EAAEC,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADQ;AAAA;AAFP,KAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BJ,CAJJ;AAkDH;;AAED,eAAeZ,MAAf","sourcesContent":["import React from \"react\";\r\nimport { createDrawerNavigator } from '@react-navigation/drawer'\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\r\n\r\nimport Movies from '../pages/Movies';\r\nimport StackRoutes from './StackRoutes';\r\n\r\nconst Drawer = createDrawerNavigator();\r\n\r\nfunction Routes(){\r\n    return(\r\n        //importando menu de navegação drawer\r\n        //Drawer.Screen serve para indicar a tela que ira ser chamada\r\n        // name (nome que quero para ela) componente (componente importado)\r\n        <Drawer.Navigator\r\n            screenOptions={{\r\n                headerShown: false,\r\n                \r\n                drawerStyle:{\r\n                    backgroundColor: '#090A0E',\r\n                    paddingTop: 20,\r\n                },\r\n\r\n                drawerActiveBackgroundColor: '#E72F49',\r\n                drawerActiveTintColor: '#FFF',\r\n                drawerInativeTintColor: '#FFF'\r\n            }}\r\n        >\r\n            <Drawer.Screen\r\n                name=\"HomeDrawer\" \r\n                component={StackRoutes} \r\n                options={{\r\n                    title: 'Home',\r\n                    drawerIcon: ({ focused, size, color }) => (\r\n                        <MaterialCommunityIcons \r\n                            // condicao (? significa se for verdadeira, : significa se for falsa)\r\n                            name={focused ? 'movie-open' : 'movie-outline'}\r\n                            size={size}\r\n                            color={color} \r\n                        />\r\n                    )\r\n                }}\r\n            />\r\n            <Drawer.Screen \r\n                name=\"Movies\" \r\n                component={Movies} \r\n                options={{\r\n                    title: \"Meus Filmes\",\r\n                    drawerIcon: ({ focused, size, color }) => (\r\n                        <MaterialCommunityIcons \r\n                            // condicao (? significa se for verdadeira, : significa se for falsa)\r\n                            name={focused ? 'archive' : 'archive-outline'}\r\n                            size={size}\r\n                            color={color} \r\n                        />\r\n                    )\r\n                }}\r\n            />\r\n        </Drawer.Navigator>\r\n    )\r\n}\r\n\r\nexport default Routes;"]},"metadata":{},"sourceType":"module"}